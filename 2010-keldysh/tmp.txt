\section{Объекты управления}

\begin{frame}
\frametitle{Объекты управления}
\framesubtitle{Роботы и мехатронные устройства собственной разработки(полный
цикл)} Учебные роботы АМУР
%\includegraphics[height=6cm]{amur.jpg}
\end{frame}

\begin{frame}
\frametitle{Объекты управления}
\framesubtitle{Роботы и мехатронные устройства собственной разработки(полный
цикл)} Учебные роботы АМУР
%\includegraphics[height=6cm]{amur2.jpg}
\end{frame}



\begin{frame}
\frametitle{Объекты управления}
\framesubtitle{Роботы и мехатронные устройства собственной разработки(полный
цикл)} Борбот
%\includegraphics[height=8cm]{borbot.jpg}
\end{frame}


\section{Системы программирования}
\begin{frame}
\frametitle{Системы программирования}
Существует довольно много сред программирования мобильных роботов:
\begin{itemize}
\item<1> \textbf{Microsoft Robotics Studi}o \textit{http://msdn.microsoft.com/en-us/robotics/default.aspx}
\item<1> \textbf{Player Project} \textit{http://playerstage.sourceforge.net}
\item<1> \textbf{ORCA2} \textit{http://orca-robotics.sourceforge.net/orca/index.html}
\item<1> \textbf{LAAS/GenoM} \textit{https://softs.laas.fr/openrobots/wiki/genom}
\item<1> \textbf{Marie} \textit{http://marie.sourceforge.net}
\item<1> \textbf{URBI} \textit{http://www.urbiforge.com}
\item<1> \textbf{Webots} \textit{http://www.cyberbotics.com}
\item<1> \textbf{RoboJRE} \textit{http://www.ridgesoft.com/robojde/robojde.htm}
\item<1> \textbf{OROCOS} \textit{http://www.orocos.org}
\item<1> \textbf{LEGO, iRobot, ...}
\end{itemize}
\end{frame}

\subsection{Технологии программирования}
\begin{frame}
\frametitle{Технологии программирования}
\begin{itemize}
\item<1> Программируются готовые, выпускаемые серийно роботы и мехатронные
устройства
\item<2> \alert{Роботы разрабатываются самостоятельно и меняются во времени} 
\item<1-> Язык программирования - С,С++,Java, Python, C\#
\item<1-> Управляющее ПО конструируется из распределенных
компонент(модулей/агентов/сервисов).
\item<1-> Взаимодействие программных компонент через сеть Ethernet и RPC
(Remote Procedure Call, удаленный вызов процедур)
\end{itemize}
\end{frame}


\subsection{Недостатки традиционного подхода}
\begin{frame}
\frametitle{Недостатки традиционного подхода}
\begin{itemize}
  \item<1-> RPC подразумевает вызов уже существующих функций, в то время как
  процесс разработки сопровождается их созданием. Таким образом появляется
  необходимость постоянного обновления протокола и программ бортовой ЭВМ, а 
  обновление программ бортовой ЭВМ требует довольно длительной
  процедуры ``перезагрузки``  
  \item<1->Программы бортовой ЭВМ реализованы на компилируемом языке и
  любое обновление требует их повторной компилляции
  \item<1-> Традиционно используемые языки программирования неудобны для частой
  модернизации программ
\end{itemize}
\end{frame}

\section{Предлагаемый подход}
\begin{frame}
\frametitle{Предлагаемый подход}
\begin{itemize}
  \item<1>Перейти от использования компиллируемого языка со статической
  типизацией (С++) к динамическому интерпретируемому языку
  \item<1>Обеспечить возможность изменять ПО бортовой ЭВМ без необходимости
  перезагрузки и, по-возможности, остановки. Разработать соответствующий
  инструментарий
  \item<1>Упростить процесс развертывания ПО на бортовой ЭВМ
  \item<1>Реализовать возможность распределения между бортовой ЭВМ и пультом
  управления не только модулей, но и отдельных строчек программного кода 
\end{itemize}
\end{frame}

\subsection{Интерпретируемый динамический язык}
\begin{frame}
\frametitle{Интерпретируемый динамический язык}
Использование в качестве основного языка программирования 
интерпретируемого динамического языка позволяет:
\begin{itemize}
  \item<1-> Устранить необходимость в файлах конфигурации.   
  \item<1-> Устранить этап компилляции для ПО бортовой ЭВМ
  \item<1-> Легко вносить незапланированные изменения в ПО бортовой ЭВМ в
  полевых условиях
\end{itemize}
\pause
\alert{Производительность, по сравнению с языком С, хуже в 1-500 раз}
(компенсируется благодаря использованию быстрых математических библиотек)
\end{frame}

\subsection{Тьюринг-полный протокол}
\begin{frame}
\frametitle{Тьюринг-полный протокол}
\begin{itemize}
  \item<1> Изменение аппаратной составляющей робота или мехатронного устройства
  требует соответствующего изменения и программной составляющей. Как правило, за
  этим также следует изменение управляющего протокола (т.е. добавление новых
  комманд или удаление сущесвующих)
\item<1> Протокол управления это, фактически, язык программирования, и его можно
оценить с точки зрения полноты по Тьюрингу
\item<1> Вместо постоянного наращивания (вслед за аппаратной составляющей)
языка-протокола, имеет смысл сразу реализовать тьюринг-полный протокол.
\end{itemize}
\end{frame}

\subsection{Язык Python}
\begin{frame}
\frametitle{Язык Python}
\framesubtitle{Почему Python, а не ruby/perl/tcl/lua/scala/\ldots}
\begin{itemize}
	\item<1>Простой и компактный синтаксис облегчает не только программирование, но
	и кодогенерацию
	\item<1>Простота интеграции с готовыми системами, созданными на С
	\item<1>Распространенность. Python используется более чем в 1400
	программах, входящих в комплект поставки Linux Ubuntu
	\item<1> Наличие открытых и эффективных сторонних библиотек: mathplotlib
	(графопостроитель), scipy (пакет математических библиотек) и др.,
	позволяющих почти полностью воспроизвести возможности mathlab в составе разрабатываемого ПО
\end{itemize}
\end{frame}

\section{Результаты}
\subsection{Новый процесс разработки}
\begin{frame}
\frametitle{Старый и новый процессы разработки}
\begin{footnotesize}


\begin{itemize}
  \item<1-> Программист получает устройство и документацию,
  создает стенд и ``знакомится`` с устройством.
  \item<2> Устройство можно сразу монтировать на борт, т.к. реализованы
  прозрачные средства доступа к аппаратным ресурсам через сеть.
  \item<1> Программист подготавливает высокоуровневую ``обертку`` для устройства
  и модифицирует бортовые программы для работы с ним.
  \item<2>Все необходимые изменения можно реализовать в рамках протокола обмена,
  не изменяя бортовых программ.
  \item<1> Бортовые программы обновляются и устройство монтируется а борт.
  \item<1> Если возникают проблемы, устройство демонтируется и возвращается на
  стенд.
  \item<2> Как только устройство будет протестировано, изменения протокола
  фиксируются(без изменений) в виде бортовых программ.
\end{itemize}
\end{footnotesize}
\end{frame}

\subsection{Итоги}
\begin{frame}
\frametitle{Итоги:}
\begin{enumerate}
  \item<1> Сокращение времени разработки и модернизации в 3-5 раз
  \item<1> Сокращение объемов исходных текcтов в 4-5 раз\footnote{по
  сравнению с нашими предыдущими разработками}
  \item<1> Возможность плавно варьировать распределение ПО между пультом
  управления и бортовой ЭВМ
\end{enumerate}
\end{frame}